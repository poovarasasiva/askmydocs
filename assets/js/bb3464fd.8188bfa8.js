"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[3998],{3384:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"ai-engine","title":"AI Engine","description":"How AskMyDocs uses embeddings, vector search, and LLMs for intelligent document Q&A.","source":"@site/docs/ai-engine.md","sourceDirName":".","slug":"/ai-engine","permalink":"/askmydocs/docs/ai-engine","draft":false,"unlisted":false,"editUrl":"https://github.com/poovarasasiva/askmydocs/tree/main/website/docs/ai-engine.md","tags":[],"version":"current","frontMatter":{"id":"ai-engine","title":"AI Engine","sidebar_label":"AI Engine"},"sidebar":"tutorialSidebar","previous":{"title":"Backend","permalink":"/askmydocs/docs/backend"},"next":{"title":"Deployment","permalink":"/askmydocs/docs/deployment"}}');var t=i(4848),s=i(8453);const c={id:"ai-engine",title:"AI Engine",sidebar_label:"AI Engine"},a="\ud83e\udd16 AI Engine Architecture",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Document Processing Pipeline",id:"document-processing-pipeline",level:2},{value:"1. Text Extraction (Main Flow)",id:"1-text-extraction-main-flow",level:3},{value:"2. Text Chunking (Concept)",id:"2-text-chunking-concept",level:3},{value:"3. Embedding Generation (Core Logic)",id:"3-embedding-generation-core-logic",level:3},{value:"4. Vector Search (Concept)",id:"4-vector-search-concept",level:3},{value:"5. Answer Generation (Flow)",id:"5-answer-generation-flow",level:3},{value:"6. Prompt Engineering (Structure)",id:"6-prompt-engineering-structure",level:3},{value:"Vector Search",id:"vector-search",level:2},{value:"MongoDB Vector Index",id:"mongodb-vector-index",level:3},{value:"Semantic Retrieval",id:"semantic-retrieval",level:2},{value:"Optimization Strategies",id:"optimization-strategies",level:2},{value:"1. <strong>Embedding Caching</strong>",id:"1-embedding-caching",level:3},{value:"2. <strong>Batch Embedding</strong>",id:"2-batch-embedding",level:3},{value:"3. <strong>Connection Pooling</strong>",id:"3-connection-pooling",level:3},{value:"4. <strong>Sharding-Ready Schema</strong>",id:"4-sharding-ready-schema",level:3},{value:"Summary",id:"summary",level:2}];function l(e){const n={blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-ai-engine-architecture",children:"\ud83e\udd16 AI Engine Architecture"})}),"\n",(0,t.jsx)(n.p,{children:"How AskMyDocs uses embeddings, vector search, and LLMs for intelligent document Q&A."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The AI engine is designed as a modular, horizontally scalable service that processes, embeds, and retrieves document intelligence efficiently.",(0,t.jsx)(n.br,{}),"\n","It consists of three main components:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document Processing"})," \u2014 Extract, chunk, and embed text data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Semantic Search"})," \u2014 Retrieve relevant context via vector similarity"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Answer Generation"})," \u2014 Generate contextual answers with LLMs"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Got it \u2014 you don\u2019t want the full implementations, just the essential logic that shows ",(0,t.jsx)(n.em,{children:"how"})," the system works. Here\u2019s the condensed version focusing only on the main concepts and structure (still markdown + C# style):"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"document-processing-pipeline",children:"Document Processing Pipeline"}),"\n",(0,t.jsx)(n.h3,{id:"1-text-extraction-main-flow",children:"1. Text Extraction (Main Flow)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"UploadDocsAsync(file, name, tenantId)\n{\n    var processor = _orchestrator.GetProcessor(extension);\n    var content = await processor.ExtractTextAsync(file);\n    var chunks = content.ChunkBySentences(1000, 10);\n\n    foreach (var chunk in chunks)\n        SaveChunk(chunk, await _embedding.GetEmbedding(chunk));\n\n    await _metadata.Add(new UploadRequest { ... });\n    return documentId;\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"2-text-chunking-concept",children:"2. Text Chunking (Concept)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"ChunkBySentences(text, max=1000, overlap=200)\n{\n    foreach (var sentence in SplitByRegex(text))\n        BuildChunksWithOverlap(sentence);\n    yield return finalChunk;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Sentence-based segmentation + overlap ensures contextual continuity."})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"3-embedding-generation-core-logic",children:"3. Embedding Generation (Core Logic)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'GetEmbedding(text)\n{\n    var payload = Json({ text });\n    var response = await _fastApi.Post("/embed", payload);\n    return ParseEmbedding(response);\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Custom FastAPI vector service returning normalized float arrays."})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"4-vector-search-concept",children:"4. Vector Search (Concept)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"GetRelevantChunks(question)\n{\n    var qEmbed = await _embedding.GetEmbedding(question);\n    return await _repo.VectorSearch(qEmbed, limit:3);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Finds top N semantically closest chunks."})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"5-answer-generation-flow",children:"5. Answer Generation (Flow)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"GenerateAnswer(context)\n{\n    var payload = { model, messages = context };\n    var response = await _llmClient.PostAsync(payload);\n    return ExtractText(response);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"RAG-style LLM answering using Mistral model."})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"6-prompt-engineering-structure",children:"6. Prompt Engineering (Structure)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'DefaultPrompts\n{\n    System = "You are a helpful assistant.";\n    TechnicalExpert = "Explain with precision and clarity.";\n    DocWriter = "Write structured, professional docs.";\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Reusable roles defining model behavior."})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"vector-search",children:"Vector Search"}),"\n",(0,t.jsx)(n.h3,{id:"mongodb-vector-index",children:"MongoDB Vector Index"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'db.documents.createIndex(\n  { "chunks.embedding": "vector" },\n  {\n    name: "vector_index",\n    vectorOptions: {\n      type: "Ann",\n      numDimensions: 768,\n      similarity: "cosine"\n    }\n  }\n);\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"semantic-retrieval",children:"Semantic Retrieval"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class DocumentRepository\n{\n    public async Task<List<ChunkWithScore>> SearchSimilarChunksAsync(\n        float[] queryEmbedding, string documentId, int topK = 5)\n    {\n        var pipeline = new[]\n        {\n            new BsonDocument("$vectorSearch", new BsonDocument\n            {\n                { "queryVector", new BsonArray(queryVector) },\n                { "path", "Embedding" },\n                { "numCandidates", 100 },\n                { "limit", limit },\n                { "index", "vector_index" }\n            }),\n        };\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"optimization-strategies",children:"Optimization Strategies"}),"\n",(0,t.jsxs)(n.h3,{id:"1-embedding-caching",children:["1. ",(0,t.jsx)(n.strong,{children:"Embedding Caching"})]}),"\n",(0,t.jsx)(n.p,{children:"Avoid redundant vector generation for identical text."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class CachedEmbeddingService\n{\n    private readonly IMemoryCache _cache;\n    private readonly EmbeddingService _embeddingService;\n\n    public async Task<float[]> GenerateEmbeddingAsync(string text)\n    {\n        var key = $"embedding:{ComputeHash(text)}";\n        if (_cache.TryGetValue(key, out float[] cached)) return cached;\n\n        var embedding = await _embeddingService.GenerateEmbeddingAsync(text);\n        _cache.Set(key, embedding, TimeSpan.FromHours(24));\n        return embedding;\n    }\n\n    private static string ComputeHash(string input)\n    {\n        using var sha = SHA256.Create();\n        var hash = sha.ComputeHash(Encoding.UTF8.GetBytes(input));\n        return Convert.ToHexString(hash);\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"2-batch-embedding",children:["2. ",(0,t.jsx)(n.strong,{children:"Batch Embedding"})]}),"\n",(0,t.jsx)(n.p,{children:"Generate embeddings in parallel batches to reduce network latency."}),"\n",(0,t.jsxs)(n.h3,{id:"3-connection-pooling",children:["3. ",(0,t.jsx)(n.strong,{children:"Connection Pooling"})]}),"\n",(0,t.jsx)(n.p,{children:"Reuse HTTP and DB connections to prevent resource exhaustion under high concurrency."}),"\n",(0,t.jsxs)(n.h3,{id:"4-sharding-ready-schema",children:["4. ",(0,t.jsx)(n.strong,{children:"Sharding-Ready Schema"})]}),"\n",(0,t.jsxs)(n.p,{children:["Design database with a ",(0,t.jsx)(n.code,{children:"TenantId"})," or ",(0,t.jsx)(n.code,{children:"DocumentId"})," partition key to support future horizontal scaling of embeddings and conversations."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Layer"}),(0,t.jsx)(n.th,{children:"Responsibility"}),(0,t.jsx)(n.th,{children:"Key Techniques"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Document Processing"})}),(0,t.jsx)(n.td,{children:"Clean & chunk input text"}),(0,t.jsx)(n.td,{children:"Sliding window, tokenization"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Embedding Generation"})}),(0,t.jsx)(n.td,{children:"Convert text to semantic vectors"}),(0,t.jsx)(n.td,{children:"Sentence Transformers"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Vector Search"})}),(0,t.jsx)(n.td,{children:"Retrieve top-matching chunks"}),(0,t.jsx)(n.td,{children:"MongoDB vector index (HNSW)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Answer Generation"})}),(0,t.jsx)(n.td,{children:"LLM-based reasoning"}),(0,t.jsx)(n.td,{children:"Prompt engineering, Hugging Face API"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Optimization"})}),(0,t.jsx)(n.td,{children:"Performance & scale"}),(0,t.jsx)(n.td,{children:"Caching, batching, pooling, sharding-ready schema"})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"AskMyDocs AI Engine"})," \u2014 a modular, fault-tolerant, and horizontally scalable system combining retrieval-augmented generation with engineering-grade efficiency."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);