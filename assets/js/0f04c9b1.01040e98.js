"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[3550],{2808:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"backend","title":"Backend Architecture","description":"Production-grade .NET 10 Web API built with Clean Architecture + CQRS, optimized for scalability, maintainability, and AI integration.","source":"@site/docs/backend.md","sourceDirName":".","slug":"/backend","permalink":"/askmydocs/docs/backend","draft":false,"unlisted":false,"editUrl":"https://github.com/poovarasasiva/askmydocs/tree/main/website/docs/backend.md","tags":[],"version":"current","frontMatter":{"id":"backend","title":"Backend Architecture","sidebar_label":"Backend"},"sidebar":"tutorialSidebar","previous":{"title":"Architecture","permalink":"/askmydocs/docs/architecture"},"next":{"title":"AI Engine","permalink":"/askmydocs/docs/ai-engine"}}');var i=t(4848),s=t(8453);const o={id:"backend",title:"Backend Architecture",sidebar_label:"Backend"},r="\ud83d\udd27 Backend Architecture",c={},l=[{value:"Project Structure",id:"project-structure",level:2},{value:"Middleware Pipeline",id:"middleware-pipeline",level:2},{value:"1. Global Error Handling",id:"1-global-error-handling",level:3},{value:"2. JWT Token Validation",id:"2-jwt-token-validation",level:3},{value:"3. Rate Limiting",id:"3-rate-limiting",level:3},{value:"\ud83e\udde9 Database Schema (MongoDB)",id:"-database-schema-mongodb",level:2},{value:"Users Collection",id:"users-collection",level:3},{value:"Roles Collection",id:"roles-collection",level:3},{value:"ChatHistory Collection",id:"chathistory-collection",level:3},{value:"DocumentChunks Collection",id:"documentchunks-collection",level:3},{value:"DocumentMetadata Collection",id:"documentmetadata-collection",level:3},{value:"UserTokens Collection",id:"usertokens-collection",level:3},{value:"\u2699\ufe0f Configuration (appsettings.json)",id:"\ufe0f-configuration-appsettingsjson",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-backend-architecture",children:"\ud83d\udd27 Backend Architecture"})}),"\n",(0,i.jsxs)(n.p,{children:["Production-grade ",(0,i.jsx)(n.strong,{children:".NET 10 Web API"})," built with ",(0,i.jsx)(n.strong,{children:"Clean Architecture + CQRS"}),", optimized for scalability, maintainability, and AI integration."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"AskMyDocs/\n\u251c\u2500\u2500 AskMyDocs.API/              # Presentation\n\u2502   \u251c\u2500\u2500 Controllers/\n\u2502   \u251c\u2500\u2500 Middleware/\n\u2502   \u2514\u2500\u2500 Filters/\n\u251c\u2500\u2500 AskMyDocs.Application/      # Business Logic\n\u2502   \u251c\u2500\u2500 Commands/\n\u2502   \u251c\u2500\u2500 Queries/\n\u2502   \u251c\u2500\u2500 Handlers/\n\u2502   \u2514\u2500\u2500 DTOs/\n\u251c\u2500\u2500 AskMyDocs.Domain/           # Core\n\u2502   \u251c\u2500\u2500 Entities/\n\u2502   \u251c\u2500\u2500 ValueObjects/\n\u2502   \u2514\u2500\u2500 Interfaces/\n\u251c\u2500\u2500 AskMyDocs.Infrastructure/   # External\n\u2502   \u251c\u2500\u2500 Repositories/\n\u2502   \u251c\u2500\u2500 Services/\n\u2502   \u2514\u2500\u2500 Data/\n\u2514\u2500\u2500 AskMyDocs.Shared/           # Common\n    \u251c\u2500\u2500 Exceptions/\n    \u2514\u2500\u2500 Extensions/\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"middleware-pipeline",children:"Middleware Pipeline"}),"\n",(0,i.jsx)(n.h3,{id:"1-global-error-handling",children:"1. Global Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public sealed class GlobalErrorHandlingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<GlobalErrorHandlingMiddleware> _logger;\n    private readonly IWebHostEnvironment _env;\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            await HandleExceptionAsync(context, ex);\n        }\n    }\n\n    private async Task HandleExceptionAsync(HttpContext context, Exception exception)\n    {\n        var statusCode = exception switch\n        {\n            ApiException apiEx => apiEx.StatusCode,\n            UnauthorizedAccessException => StatusCodes.Status401Unauthorized,\n            _ => StatusCodes.Status500InternalServerError\n        };\n\n        var errorResponse = new ErrorResponse(false, statusCode, exception.Message, context.TraceIdentifier, DateTime.UtcNow);\n        await context.Response.WriteAsJsonAsync(errorResponse);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-jwt-token-validation",children:"2. JWT Token Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public sealed class TokenValidationMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ITokenHasher _tokenHasher;\n\n    public async Task InvokeAsync(HttpContext context, IServiceProvider serviceProvider)\n    {\n        var authHeader = context.Request.Headers["Authorization"].FirstOrDefault();\n        if (string.IsNullOrWhiteSpace(authHeader))\n        {\n            await RespondUnauthorized(context, "Missing token");\n            return;\n        }\n\n        var token = authHeader.Replace("Bearer ", "", StringComparison.OrdinalIgnoreCase);\n        var hashedToken = _tokenHasher.Hash(token);\n\n        var dbContext = serviceProvider.GetRequiredService<MongoDbContext>();\n        var tokenDoc = await dbContext.UserToken\n            .Find(t => t.Token == hashedToken)\n            .FirstOrDefaultAsync();\n\n        if (tokenDoc == null || tokenDoc.IsRevoked)\n        {\n            await RespondUnauthorized(context, "Invalid or expired token");\n            return;\n        }\n\n        context.Request.Headers["TenantId"] = tokenDoc.TenantId;\n        await _next(context);\n    }\n\n    private static async Task RespondUnauthorized(HttpContext context, string message)\n    {\n        context.Response.StatusCode = StatusCodes.Status401Unauthorized;\n        await context.Response.WriteAsync(message);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-rate-limiting",children:"3. Rate Limiting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public sealed class InMemoryTenantRateLimiter : ITenantRateLimiter\n{\n    private readonly IMemoryCache _cache;\n    private const int Limit = 10;\n    private static readonly TimeSpan Window = TimeSpan.FromMinutes(1);\n\n    public Task<bool> AllowRequestAsync(string tenantId)\n    {\n        var counter = _cache.GetOrCreate($"rate-{tenantId}", e =>\n        {\n            e.AbsoluteExpirationRelativeToNow = Window;\n            return new Counter();\n        });\n\n        lock (counter)\n        {\n            if (counter.Count >= Limit) return Task.FromResult(false);\n            counter.Count++;\n            return Task.FromResult(true);\n        }\n    }\n\n    private sealed class Counter { public int Count { get; set; } }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-database-schema-mongodb",children:"\ud83e\udde9 Database Schema (MongoDB)"}),"\n",(0,i.jsx)(n.h3,{id:"users-collection",children:"Users Collection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "_id": "string",\n  "email": "user@example.com",\n  "passwordHash": "bcrypt_hash",\n  "firstName": "John",\n  "lastName": "Doe",\n  "roles": ["User"],\n  "createdAt": "2025-10-30T12:00:00Z"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"roles-collection",children:"Roles Collection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "_id": "string",\n  "name": "Admin",\n  "description": "Full system access",\n  "createdAt": "2025-10-30T12:00:00Z"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"chathistory-collection",children:"ChatHistory Collection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "_id": "ObjectId",\n  "sessionId": "session_abc123",\n  "userId": "user_123",\n  "messages": [\n    { "role": "user", "content": "Summarize this document." },\n    { "role": "assistant", "content": "This document discusses AI-based document processing." }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"documentchunks-collection",children:"DocumentChunks Collection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "_id": "string",\n  "documentId": "doc_123",\n  "chunkIndex": 0,\n  "text": "AI enables document understanding...",\n  "embedding": [0.12, -0.43, 0.88, ...],\n  "userId": "user_123",\n  "uploadedAt": "2025-10-30T12:00:00Z"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"documentmetadata-collection",children:"DocumentMetadata Collection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "_id": "string",\n  "tenantId": "tenant_001",\n  "fileName": "project_spec.pdf",\n  "fileType": "application/pdf",\n  "uploadedAt": "2025-10-30T12:00:00Z"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"usertokens-collection",children:"UserTokens Collection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "_id": "string",\n  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",\n  "tenantId": "tenant_001",\n  "documentId": "doc_123",\n  "expiresAt": "2025-11-06T12:00:00Z",\n  "isRevoked": false\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-configuration-appsettingsjson",children:"\u2699\ufe0f Configuration (appsettings.json)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "OpenAI": { "ApiKey": "<OpenAIKey>" },\n  "HuggingFace": {\n    "Token": "<HuggingFaceKey>",\n    "EmbeddingUrl": "<EmbeddingURL>",\n    "GenerateAnswerUrl": "<AnswerURL>"\n  },\n  "MongoDbSettings": {\n    "ConnectionString": "<MongoConn>",\n    "DatabaseName": "<MainDB>",\n    "IdentityDatabaseName": "<AuthDB>"\n  },\n  "JwtSettings": {\n    "SecretKey": "<Secret>",\n    "Issuer": "<Issuer>",\n    "Audience": "<Audience>",\n    "TokenExpiryInMinutes": 60\n  }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);